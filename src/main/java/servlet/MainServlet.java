package servlet;import model.RestMethodsEnum;import repository.PostRepository;import controller.PostController;import service.PostService;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class MainServlet extends HttpServlet {    private PostController apiPostscontroller;    private final String POSTS_API_URI = "/api/posts";    @Override    public void init() {        System.out.println("Ok");        initApiPostsController();    }    private void initApiPostsController() {        final var repository = new PostRepository();        final var service = new PostService(repository);        apiPostscontroller = new PostController(service);    }    private void postsApiController(HttpServletResponse resp, HttpServletRequest req) throws IOException {        final var method = req.getMethod();        final var id = req.getPathInfo();        if (method.equalsIgnoreCase(RestMethodsEnum.GET.toString())) {            if (id != null) {                apiPostscontroller.getById(Long.parseLong(id), resp);            } else {                apiPostscontroller.all(resp);            }        }        if (method.equalsIgnoreCase(RestMethodsEnum.POST.toString())) {            apiPostscontroller.save(req.getReader(), resp);        }        if (method.equalsIgnoreCase(RestMethodsEnum.DELETE.toString()) && id != null) {            apiPostscontroller.removeById(Long.parseLong(id), resp);        }        System.out.println("error");        resp.setStatus(HttpServletResponse.SC_NOT_FOUND);    }    private void setHandlers(HttpServletRequest req, HttpServletResponse resp) {        try {            switch (req.getRequestURI()) {                case POSTS_API_URI:                    postsApiController(resp, req);                    return;                default:                    resp.setStatus(HttpServletResponse.SC_NOT_FOUND);            }        } catch (Exception e) {            e.printStackTrace();            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);        }    }    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) {        setHandlers(req, resp);    }}