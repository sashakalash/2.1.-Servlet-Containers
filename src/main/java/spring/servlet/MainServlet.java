package spring.servlet;import spring.model.RestMethodsEnum;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import spring.controller.PostController;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class MainServlet extends HttpServlet {    private PostController apiPostscontroller;    private final String POSTS_API_URI = "/api/posts";    @Override    public void init() {        initApiPostsController();    }    private void initApiPostsController() {        final var context = new AnnotationConfigApplicationContext("spring");        apiPostscontroller = (PostController) context.getBean("postController");    }    private void postsApiController(HttpServletResponse resp, HttpServletRequest req) throws IOException {        final var method = req.getMethod();        final var path = req.getRequestURI();        final var id = path.substring(path.lastIndexOf("/") + 1);        if (method.equalsIgnoreCase(RestMethodsEnum.GET.toString())) {            if (path.matches(POSTS_API_URI + "/\\d+")) {                apiPostscontroller.getById(Long.parseLong(id), resp);            } else {                apiPostscontroller.all(resp);            }            return;        }        if (method.equalsIgnoreCase(RestMethodsEnum.POST.toString())) {            apiPostscontroller.save(req.getReader(), resp);            return;        }        if (method.equalsIgnoreCase(RestMethodsEnum.DELETE.toString()) && path.matches(POSTS_API_URI + "/\\d+")) {            apiPostscontroller.removeById(Long.parseLong(id), resp);            return;        }        resp.setStatus(HttpServletResponse.SC_NOT_FOUND);    }    private void setHandlers(HttpServletRequest req, HttpServletResponse resp) {        try {            if (req.getRequestURI().contains(POSTS_API_URI)) {                postsApiController(resp, req);                return;            }            resp.setStatus(HttpServletResponse.SC_NOT_FOUND);        } catch (Exception e) {            e.printStackTrace();            resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);        }    }    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) {        setHandlers(req, resp);    }}